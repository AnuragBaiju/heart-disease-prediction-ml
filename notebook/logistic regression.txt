import pandas as pd
import time
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the encoded dataset
df = pd.read_csv('/content/Cleaned_Final_Heart_Dataset.csv')

# Split features and target
X = df.drop('target', axis=1)
y = df['target']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LogisticRegression(max_iter=1000, random_state=42)
model.fit(X_train, y_train)

# Measure latency for prediction
start_time = time.time()
y_pred = model.predict(X_test)
end_time = time.time()

# Calculate metrics
latency = end_time - start_time
throughput = len(y_pred) / latency
accuracy = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Display results
print("Logistic Regression Results:")
print(f"Accuracy: {accuracy:.4f}")
print(f"Latency: {latency:.4f} seconds")
print(f"Throughput: {throughput:.2f} predictions/second")
print("\nConfusion Matrix:")
print(cm)
print("\nClassification Report:")
print(report)

# Confusion matrix heatmap
plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Oranges',
            xticklabels=["No Disease", "Disease"],
            yticklabels=["No Disease", "Disease"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix - Logistic Regression")
plt.tight_layout()
plt.show()
